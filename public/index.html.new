<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TikTok Live Monitor</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-100 p-4">
    <div class="max-w-7xl mx-auto">
        <!-- Control Panel -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-4 flex space-x-4">
            <button id="checkStatus" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md">
                Check Status
            </button>
            <button id="startMonitor" class="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-md" disabled>
                Start Monitoring
            </button>
            <button id="stopMonitor" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-md" disabled>
                Stop Monitoring
            </button>
            <button id="editUsername" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md">
                Edit Username
            </button>
            <button id="downloadCsv" class="bg-purple-500 hover:bg-purple-600 text-white px-4 py-2 rounded-md">
                Download CSV
            </button>
        </div>

        <!-- Status Summary -->
        <div class="bg-white rounded-lg shadow-md p-4 mb-4">
            <h2 class="text-lg font-semibold mb-2">Status Summary</h2>
            <div class="flex space-x-4">
                <div>
                    <span class="text-green-500">‚óè</span> Ready: <span id="readyCount">0</span>
                </div>
                <div>
                    <span class="text-yellow-500">‚óè</span> Not Ready: <span id="notReadyCount">0</span>
                </div>
            </div>
        </div>

        <!-- Account Status Section -->
        <div class="grid grid-cols-1 gap-4 mb-4">
            <div class="bg-white rounded-lg shadow-md p-4">
                <h2 class="text-lg font-semibold mb-2">Ready Accounts</h2>
                <div id="readyAccounts" class="flex flex-wrap gap-4">
                    <!-- Ready accounts will be inserted here -->
                </div>
            </div>
            <div class="bg-white rounded-lg shadow-md p-4">
                <h2 class="text-lg font-semibold mb-2">Not Ready Accounts</h2>
                <div id="notReadyAccounts" class="flex flex-wrap gap-4">
                    <!-- Not ready accounts will be inserted here -->
                </div>
            </div>
        </div>

        <!-- Loading indicator -->
        <div id="loadingIndicator" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white rounded-lg p-6">
                <div class="flex items-center space-x-4">
                    <div class="animate-spin rounded-full h-8 w-8 border-4 border-blue-500 border-t-transparent"></div>
                    <span class="text-lg" id="loadingText">Checking account status...</span>
                </div>
                <div class="mt-4 text-sm text-gray-600" id="loadingDetail"></div>
            </div>
        </div>

        <!-- Username Editor Modal -->
        <div id="usernameModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
            <div class="bg-white rounded-lg p-4 w-96">
                <h2 class="text-lg font-semibold mb-4">Edit Usernames</h2>
                <textarea id="usernameList" class="w-full h-40 border rounded-md p-2 mb-4"></textarea>
                <div class="flex justify-end space-x-2">
                    <button id="cancelEdit" class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md">Cancel</button>
                    <button id="saveUsernames" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md">Save</button>
                </div>
            </div>
        </div>
    </div>

    <template id="accountCardTemplate">
        <div class="account-card bg-white rounded-xl shadow-md p-4 hover:scale-105 transition-all w-64">
            <div class="flex justify-between items-center mb-2">
                <h3 class="font-semibold username"></h3>
                <span class="status-indicator w-3 h-3 rounded-full"></span>
            </div>
            <div class="text-sm text-gray-600">
                <p>Viewers: <span class="viewer-count">0</span></p>
                <p>Peak: <span class="peak-viewer">0</span></p>
                <div class="last-check text-xs text-gray-400"></div>
                <div class="error-msg text-xs text-red-500 mt-1 hidden"></div>
                <div class="gift-section hidden mt-2">
                    <h4 class="font-medium mb-1">Recent Gifts</h4>
                    <ul class="recent-gifts text-xs space-y-1"></ul>
                    <h4 class="font-medium mt-2 mb-1">Top Spenders</h4>
                    <ul class="top-spenders text-xs space-y-1"></ul>
                </div>
            </div>
        </div>
    </template>

    <script>
        const socket = io();
        let monitoring = false;
        let accountsData = {};

        // UI Elements
        const checkStatusBtn = document.getElementById('checkStatus');
        const startMonitorBtn = document.getElementById('startMonitor');
        const stopMonitorBtn = document.getElementById('stopMonitor');
        const editUsernameBtn = document.getElementById('editUsername');
        const downloadCsvBtn = document.getElementById('downloadCsv');
        const usernameModal = document.getElementById('usernameModal');
        const usernameList = document.getElementById('usernameList');
        const saveUsernamesBtn = document.getElementById('saveUsernames');
        const cancelEditBtn = document.getElementById('cancelEdit');
        const readyAccountsContainer = document.getElementById('readyAccounts');
        const notReadyAccountsContainer = document.getElementById('notReadyAccounts');
        const loadingIndicator = document.getElementById('loadingIndicator');
        const loadingDetail = document.getElementById('loadingDetail');
        const readyCount = document.getElementById('readyCount');
        const notReadyCount = document.getElementById('notReadyCount');

        // Helper Functions
        function createAccountCard(username, data) {
            const template = document.getElementById('accountCardTemplate');
            const card = template.content.cloneNode(true);
            
            const accountCard = card.querySelector('.account-card');
            accountCard.id = `account-${username}`;
            
            card.querySelector('.username').textContent = username;
            const statusIndicator = card.querySelector('.status-indicator');
            statusIndicator.classList.add(data.status === 'ready' ? 'bg-green-500' : 'bg-yellow-500');
            
            if (data.lastChecked) {
                card.querySelector('.last-check').textContent = `Last checked: ${new Date(data.lastChecked).toLocaleTimeString()}`;
            }
            
            if (data.error) {
                const errorMsg = card.querySelector('.error-msg');
                errorMsg.textContent = data.error;
                errorMsg.classList.remove('hidden');
            }
            
            accountCard.addEventListener('click', () => toggleAccountDetails(accountCard));
            return accountCard;
        }

        function toggleAccountDetails(card) {
            const giftSection = card.querySelector('.gift-section');
            giftSection.classList.toggle('hidden');
        }

        function updateAccountCards() {
            readyAccountsContainer.innerHTML = '';
            notReadyAccountsContainer.innerHTML = '';
            
            const readyAccounts = [];
            const notReadyAccounts = [];
            
            Object.entries(accountsData).forEach(([username, data]) => {
                if (data.status === 'ready') {
                    readyAccounts.push([username, data]);
                } else {
                    notReadyAccounts.push([username, data]);
                }
            });
            
            readyCount.textContent = readyAccounts.length;
            notReadyCount.textContent = notReadyAccounts.length;
            
            readyAccounts.forEach(([username, data]) => {
                readyAccountsContainer.appendChild(createAccountCard(username, data));
            });
            
            notReadyAccounts.forEach(([username, data]) => {
                notReadyAccountsContainer.appendChild(createAccountCard(username, data));
            });
        }

        function updateAccountSession(username, sessionData) {
            const card = document.getElementById(`account-${username}`);
            if (!card) return;

            card.querySelector('.viewer-count').textContent = sessionData.viewerCount || 0;
            card.querySelector('.peak-viewer').textContent = sessionData.peakViewer || 0;

            const recentGifts = card.querySelector('.recent-gifts');
            const topSpenders = card.querySelector('.top-spenders');

            if (sessionData.recentGifts) {
                recentGifts.innerHTML = sessionData.recentGifts
                    .map(gift => `<li>${gift.sender}: ${gift.giftName} x${gift.count}</li>`)
                    .join('');
            }

            if (sessionData.topSpenders) {
                topSpenders.innerHTML = sessionData.topSpenders
                    .map(spender => `<li>${spender.username}: ${spender.diamond} üíé</li>`)
                    .join('');
            }
        }

        function showLoading(detail = '') {
            loadingIndicator.classList.remove('hidden');
            if (detail) {
                loadingDetail.textContent = detail;
                loadingDetail.classList.remove('hidden');
            } else {
                loadingDetail.classList.add('hidden');
            }
        }

        function hideLoading() {
            loadingIndicator.classList.add('hidden');
        }

        // Event Listeners
        checkStatusBtn.addEventListener('click', () => {
            socket.emit('checkStatus');
            checkStatusBtn.disabled = true;
            startMonitorBtn.disabled = true;
            stopMonitorBtn.disabled = true;
            showLoading('This may take a few seconds...');
        });

        startMonitorBtn.addEventListener('click', () => {
            socket.emit('startMonitoring');
            startMonitorBtn.disabled = true;
            stopMonitorBtn.disabled = false;
            checkStatusBtn.disabled = true;
            monitoring = true;
        });

        stopMonitorBtn.addEventListener('click', () => {
            socket.emit('stopMonitoring');
            stopMonitorBtn.disabled = true;
            checkStatusBtn.disabled = false;
            monitoring = false;
            showLoading('Stopping monitoring and saving data...');
        });

        editUsernameBtn.addEventListener('click', async () => {
            const response = await fetch('/accounts.txt');
            const content = await response.text();
            usernameList.value = content;
            usernameModal.classList.remove('hidden');
        });

        saveUsernamesBtn.addEventListener('click', async () => {
            await fetch('/updateAccounts', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ content: usernameList.value })
            });
            usernameModal.classList.add('hidden');
            location.reload();
        });

        cancelEditBtn.addEventListener('click', () => {
            usernameModal.classList.add('hidden');
        });

        downloadCsvBtn.addEventListener('click', () => {
            window.location.href = '/download/csv';
        });

        // Socket Events
        socket.on('statusUpdate', (data) => {
            accountsData = data;
            updateAccountCards();
            hideLoading();
            
            const hasReadyAccounts = Object.values(data).some(account => account.status === 'ready');
            startMonitorBtn.disabled = !hasReadyAccounts;
            checkStatusBtn.disabled = false;
            
            console.log('Account Status Update:', {
                ready: Object.entries(data).filter(([,d]) => d.status === 'ready').map(([u]) => u),
                notReady: Object.entries(data).filter(([,d]) => d.status === 'not-ready').map(([u]) => u)
            });
        });

        socket.on('sessionUpdate', (data) => {
            if (!monitoring) return;
            Object.entries(data).forEach(([username, sessionData]) => {
                updateAccountSession(username, sessionData);
            });
        });

        socket.on('monitoringStopped', () => {
            monitoring = false;
            startMonitorBtn.disabled = false;
            stopMonitorBtn.disabled = true;
            checkStatusBtn.disabled = false;
            hideLoading();
        });

        // Initialize
        socket.on('connect', () => {
            console.log('Connected to server');
            socket.emit('requestInitialStatus');
        });
    </script>
</body>
</html>
